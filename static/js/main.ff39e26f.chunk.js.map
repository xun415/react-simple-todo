{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/CreateCategory.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["localStorageEffect","key","setSelf","onSet","savedValue","localStorage","getItem","JSON","parse","console","log","newValue","setItem","stringify","Categories","atom","default","effects_UNSTABLE","categoryState","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","categoryValue","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","Object","values","map","v","CreateCategory","setCategories","prev","ToDoList","useRecoilState","setCategory","value","onInput","keys","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"uNAGMA,EAAqB,SAACC,GAAD,OAAiB,YAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAC/CC,EAAaC,aAAaC,QAAQL,GACtB,MAAdG,EACFF,EAAQK,KAAKC,MAAMJ,IAEnBK,QAAQC,IAAIN,GAEdD,GAAM,SAACQ,GACLN,aAAaO,QAAQX,EAAKM,KAAKM,UAAUF,SAShCG,EAAaC,YAAK,CAC7Bd,IAAI,aACJe,SAAO,mBACJ,QAAU,SADN,cAEJ,QAAS,SAFL,cAGJ,OAAS,QAHL,GAKPC,iBAAkB,CACdjB,EAAmB,iBAIZkB,EAAgBH,YAAK,CAChCd,IAAK,WACLe,QAAS,UAGEG,EAAYJ,YAAc,CACrCd,IAAK,OACLe,QAAS,GACTC,iBAAkB,CAChBjB,EAAmB,gBAIVoB,EAAeC,YAAS,CACnCpB,IAAK,eACLqB,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIJ,GACrB,OAAOK,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,sBClBrCG,MAxBf,WACE,IAAMC,EAAWC,YAAkBV,GAC7BK,EAAWM,YAAeZ,GAChC,EAA6Ca,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAQhC,OACE,uBAAMC,SAAUF,GARE,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,KACrBE,GAAS,SAACQ,GAAD,OACP,CAAEC,KAAMX,EAAMY,GAAIC,KAAKC,MAAOhB,aADvB,mBAEJY,OAELF,EAAS,OAAQ,OAGjB,UACE,iDACMF,EAAS,OAAQ,CACnBS,SAAU,0BAFd,IAIEC,YAAY,mBAEd,6CCUSC,MAjCf,YAA8C,IAA9BN,EAA6B,EAA7BA,KAAMb,EAAuB,EAAvBA,SAAUc,EAAa,EAAbA,GACxBM,EAAgBd,YAAehB,GAC/Bc,EAAWC,YAAkBV,GAC7B0B,EAAU,SAACC,GACf,IACmBC,EACfD,EADFE,cAAiBD,KAEnBnB,GAAS,SAACQ,GACR,IAAMa,EAAcb,EAASc,WAAU,SAACxB,GAAD,OAAUA,EAAKY,KAAOA,KACvDa,EAAU,CAAEd,OAAMC,KAAId,SAAUuB,GACtC,MAAM,GAAN,mBACKX,EAASgB,MAAM,EAAGH,IADvB,CAEEE,GAFF,YAGKf,EAASgB,MAAMH,EAAc,SAKtC,OACE,+BACE,+BAAOZ,IACNgB,OAAOC,OAAOV,GAAeW,KAAI,SAACC,GACjC,OAAOhC,IAAagC,GAChB,wBAAgBT,KAAMS,EAAGX,QAASA,EAAlC,SACGW,GADUA,UCYVC,MA/Bf,WACI,IAAMC,EAAgB7B,YAAkBf,GACxC,EAA6CiB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAahC,OACI,mCACI,uBAAMC,SAAUF,GAbJ,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,SACnBkC,GAAc,SAACC,GACX,OAAO,2BACFnC,EAAWA,GACTmC,MAIXzB,EAAS,WAAY,OAKjB,UACI,iDACQF,EAAS,WAAY,CACrBS,SAAU,iCAFlB,IAIIC,YAAY,0BAEhB,+CCADkB,I,EAAAA,EAzBf,WACI,IAAMhB,EAAgBd,YAAehB,GACjCS,EAAQO,YAAeV,GAC7B,EAAgCyC,YAAe3C,GAA/C,mBAAOM,EAAP,KAAiBsC,EAAjB,KAIA,OACE,gCACE,wCACA,uBACA,wBAAQC,MAAOvC,EAAUwC,QAPb,SAAClB,GACfgB,EAAYhB,EAAME,cAAce,QAM9B,SACKV,OAAOY,KAAKrB,GAAeW,KAAI,SAAAQ,GAAK,OAAI,wBAAoBA,MAAK,UAAKA,GAA9B,SAAwCA,GAA3BA,QAE1D,cAAC,EAAD,IANF,OAOGxC,QAPH,IAOGA,OAPH,EAOGA,EAAOgC,KAAI,SAAC7B,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKY,OAEhB,uBACA,+DACA,cAAC,EAAD,QCxBF4B,EAAcC,YAAH,u+CAuDI,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAkBlBC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,QCjENO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeN,MCRkB,CACrCC,QAAS,UACTC,UAAW,QACXK,YAAa,UACbC,YAAa,eDIT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.ff39e26f.chunk.js","sourcesContent":["import {atom, selector} from \"recoil\";\n\n// @ts-ignore\nconst localStorageEffect = (key: string) => ({setSelf, onSet}) => {\n  const savedValue = localStorage.getItem(key)\n  if (savedValue != null) {\n    setSelf(JSON.parse(savedValue))\n  } else {\n    console.log(savedValue)\n  }\n  onSet((newValue: any) => {\n    localStorage.setItem(key, JSON.stringify(newValue))\n  })\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\nexport const Categories = atom({\n  key:'categories',\n  default: {\n    ['TO_DO']: \"TO_DO\",\n    ['DOING']:\"DOING\",\n    ['DONE']: \"DONE\"\n  },\n  effects_UNSTABLE: [\n      localStorageEffect('categories')\n  ]\n})\n\nexport const categoryState = atom({\n  key: \"category\",\n  default: \"TO_DO\"\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [\n    localStorageEffect('toDoState')\n  ]\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const categoryValue = useRecoilValue(Categories);\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  // @ts-ignore\n  return (\n    <li>\n      <span>{text}</span>\n      {Object.values(categoryValue).map((v) => {\n        return category !== v && (\n            <button key={v} name={v} onClick={onClick}>\n              {v}\n            </button>)\n\n\n      })}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import {useForm } from \"react-hook-form\";\nimport {useSetRecoilState} from \"recoil\";\nimport {Categories} from \"../atoms\"\n\ninterface IForm {\n    category: string;\n}\n\nfunction CreateCategory() {\n    const setCategories = useSetRecoilState(Categories);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    // const [category, setCategory] = useRecoilState(categoryState);\n    const handleValid = ({ category }: IForm) => {\n        setCategories((prev)=>{\n            return {\n                [category]: category,\n                ...prev\n            }\n\n        })\n        setValue(\"category\", \"\");\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit(handleValid)}>\n                <input\n                    {...register(\"category\", {\n                        required: \"Please write a New Category\",\n                    })}\n                    placeholder=\"Write a New Category\"\n                />\n                <button>Add</button>\n            </form>\n        </>\n\n    )\n}\n\nexport default CreateCategory;","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\nimport CreateCategory from \"./CreateCategory\";\n\nfunction ToDoList() {\n    const categoryValue = useRecoilValue(Categories);\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n          {Object.keys(categoryValue).map(value => <option key={value} value={`${value}`}>{value}</option>)}\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n        <hr/>\n        <h1>Create your own categories!!!</h1>\n        <CreateCategory />\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}